/// \mainpage
///
/// \image html tilings.png  "Fig. 1: Wang tilings with, from left to right, default, flower, mud, and grass tiles." width=800
///
/// 1. Introduction
/// ------------
///
/// The source code for this basic Wang tiling generator, written and maintained by
/// [Ian Parberry](http://ianparberry.com), is intended to be used by students to
/// extend and modify while they are learning about Wang tiling. Wang tiling is
/// a method for tiling the plane using only a small number of tiles, in this case
/// 8 tiles, in such a way that large repeated patterns are minimized. See
/// https://en.wikipedia.org/wiki/Wang_tile for more information.
///
/// 2. Code Overview
/// -------------
///
/// It is assumed that the reader is familiar with the basics
/// of Windows programming such as `WinMain`, the Window procedure, message
/// passing, dialog boxes, and drop-down menus.
/// `Main.cpp` contains the mandatory Windows functions `wWinMain()`
/// and a Window procedure `WndProc()`, which share a single global variable
/// `static CMain* g_pMain`. Most of the other gnarly Windows-specific
/// code is hidden away in `WindowsHelpers.cpp`.
///
/// The two main classes are
/// `CMain`, which encapsulates the main body of the code in the approved object-oriented
/// fashion, and `CWangTiler`, which generates an array of tile indices for a 
/// pseudo-random Wang tiling over 8 tiles.
/// `CMain` draws the Wang tiling to a `Gdiplus::Bitmap` using a selected tileset.
/// This bitmap is drawn to the application window's
/// client area only on receipt of a `WM_PAINT` message.
///
/// Pseudo-randomness is provided by an instance of `std::default_random_engine`
/// seeded using the Windows MMIO function `timeGetTime`,
/// which returns the number of milliseconds that have elapsed since Windows was
/// last rebooted. This ensures that the probability of seeing the same Wang tiling
/// twice is negligible.
///
/// 3. The Main Ideas
/// --------------
///
/// The 8 tiles in the default tile set are depicted below in Fig. 2. The tiles are
/// indexed 0 through 7 and the index is used as a file name, for example, tile 0
/// can be found in `tiles\default\0.png`. The indexes have been chosen carefully
/// so that their binary representation uniquely identifies the tile colors.
/// This is the set of stochastic Wang tiles from
///
/// > M.F. Cohen, J. Shade, S. Hiller, and O. Deussen, 
/// > “Wang tiles for image and texture generation,” ACM Transactions on Graphics,
/// > Vol. 22, No. 3, pp. 287-294, 2003. 
///
/// \image html tileset.png "Fig. 2: The eight default tiles with their indices." width=280
///
/// The flower tiles in Fig. 1, second from left, were created by
/// [Ian Parberry](http://ianparberry.com) by hand.
/// The remaining tile sets were created using the quilting algorithm from:
///
/// > A. A. Efros and W.T. Freeman, 
/// > "Image Quilting for Texture Synthesis and Transfer", ACM SIGGRAPH 2001.
/// 
/// ### 3.1 Alphabetic and 4-bit Tile Representations
///
/// The default tile colors in Fig. 2 are green, blue, red, and yellow.
/// A tile can be described
/// by listing the first letter of the colors of each triangle counter-clockwise
/// starting at the top. For example, the tile shown in Fig. 3 (which has
/// index 1) can be described in alphabetic form as GBRY.
/// Note that red and green can only appear
/// at the top and bottom, and blue and yellow can only appear at the left and right
/// (examine the tiles in Fig. 2). We can therefore assign green and blue bit 0, and red 
/// and yellow bit 1 without ambiguity. Each 4-letter tile description 
/// can then be replaced by the unique 4-bit number obtained
/// by replacing each color with its
/// corresponding bit, 
/// for example, GBRY can be replaced by 0011 (see Fig. 3).
///
/// \image html rawbinary.png "Fig. 3: The 4-bit form of tile GBRY is 0011." width=160
///
/// ### 3.2 Getting 3-bit Tile Indexes From Alphabetic Representations
///
/// The 4-bit representation is not ideal since 4 bits can describe
/// 16 things whereas we have only 8 tiles. A compact 3-bit index can be obtained from a
/// 4-bit number as follows. The first column of Table 1 below lists the 8 tiles
/// in alphabetic form, with the corresponding 4-bit representation in the second
/// column. Notice that the first two bits, which represent the
/// top and left colors, respectively, have been indicated in 
/// <span style="color: red">red</span> and have been copied
/// to the third column of the table. Suppose the 4-bit representation of a tile
/// is \f$x_3x_2x_1x_0\f$, where \f$x_i \in\{0,1\}\f$ for \f$0 <=i < 4\f$.
/// Notice that \f$x_3\f$ corresponds to the top color and \f$x_1\f$ corresponds
/// to the bottom color. The fourth column of Table 1 contains \f$x_3 \oplus x_1\f$,
/// where \f$\oplus\f$ is the exclusive-or operator, which is 1 iff exactly one
/// of its arguments is 1 and the other 0 and is implemented in C++ as
/// `operator^`. Column four this contains the exclusive-or of the top and
/// bottom colors of the tile. Notice that these parity bits are drawn in 
/// <span style="color: blue">blue</span> in Table 1.
/// The 3-bit indexes listed in Column 5 of Table 1 are obtained by appending
/// the <span style="color: blue">blue</span> parity bit from Column 4 to the pair
/// of <span style="color: red">red</span> bits representing the
/// top and left colors from Column 3. Finally, the index in Column 6 is
/// the integer whose binary representation is in Column 5.
///
/// <center>
/// <table>
/// <caption id="index">Table 1: Tile indexes from colors.</caption>
/// <tr><th>Colors<th>4-bit<th>Top Left<th>Top \f$\oplus\f$ Bottom<th>3-bit Index<th>Index
/// <tr><td align=center>GBGB <td align=center><span style="color: red">00</span>00 <td align=center><span style="color: red">00</span> <td align=center><span style="color: blue">0</span> <td align=center><span style="color: red">00</span><span style="color: blue">0</span> <td align=center>0
/// <tr><td align=center>GBRY<td align=center><span style="color: red">00</span>11<td align=center><span style="color: red">00</span><td align=center><span style="color: blue">1</span><td align=center><span style="color: red">00</span><span style="color: blue">1</span><td align=center>1
/// <tr><td align=center>GYGY<td align=center><span style="color: red">01</span>01<td align=center><span style="color: red">01</span><td align=center><span style="color: blue">0</span><td align=center><span style="color: red">01</span><span style="color: blue">0</span><td align=center>2
/// <tr><td align=center>GYRB<td align=center><span style="color: red">01</span>10<td align=center><span style="color: red">01</span><td align=center><span style="color: blue">1</span><td align=center><span style="color: red">01</span><span style="color: blue">1</span><td align=center>3
/// <tr><td align=center>RBRB<td align=center><span style="color: red">10</span>10<td align=center><span style="color: red">10</span><td align=center><span style="color: blue">0</span><td align=center><span style="color: red">10</span><span style="color: blue">0</span><td align=center>4
/// <tr><td align=center>RBGY<td align=center><span style="color: red">10</span>01<td align=center><span style="color: red">10</span><td align=center><span style="color: blue">1</span><td align=center><span style="color: red">10</span><span style="color: blue">1</span><td align=center>5
/// <tr><td align=center>RYRY<td align=center><span style="color: red">11</span>11<td align=center><span style="color: red">11</span><td align=center><span style="color: blue">0</span><td align=center><span style="color: red">11</span><span style="color: blue">0</span><td align=center>6
/// <tr><td align=center>RYGB<td align=center><span style="color: red">11</span>00<td align=center><span style="color: red">11</span><td align=center><span style="color: blue">1</span><td align=center><span style="color: red">11</span><span style="color: blue">1</span><td align=center>7
/// </table>
/// </center>
///
/// ### 3.3 Getting Alphabetic Representations From 3-bit Tile Indexes
///
/// The process described in the previous section
/// may be inverted, that is, the colors of the tile with a given
/// 3-bit index can be found as follows.
/// The first column of Table 2 below lists the 3-bit indices in numeric form
/// with their binary representations in Column 2. Note that the left-most two bits,
/// shown in <span style="color: red">red</span>, are the colors of the top and left 
/// sides of the tile, and
/// the rightmost bit (shown in <span style="color: blue">blue</span>)
///  is the parity bit shown in Column 4 of
/// Table 1, that is, the exclusive-or of the top and bottom colors.
/// Suppose the 3-bit representation of a tile is
/// \f$y_2y_1y_0\f$, where \f$y_i \in\{0,1\}\f$ for \f$0 <=i < 3\f$.
/// Column 5 lists \f$y_2 \oplus y_0\f$, which is the bottom color of the tile.
/// These entries are draw in <span style="color: brown">brown</span>.
/// Column 6 lists \f$y_1 \oplus y_0\f$, which is the right color of the tile.
/// These entries are draw in <span style="color: orange">orange</span>.
/// The 4-bit representation of the tile can be found in Column 7.
/// These consist of the <span style="color: red">red</span> bits from Column 2 
/// followed by the <span style="color: brown">brown</span> bit from Column 5,
/// followed by the <span style="color: orange">orange</span> bit from Column 6.
/// Column 8 lists the corresponding tiles in alphabetic form.
///
/// <center>
/// <table>
/// <caption id="index">Table 2: Tile colors from indexes.</caption>
/// <tr><th>Index<th>3-bit Index<th>Top Left<th>Parity<th>Top \f$\oplus\f$ Parity<th>Left \f$\oplus\f$ Parity<th>4-bit<th>Colors
/// <tr><td align=center>0<td align=center><span style="color: red">00</span><span style="color: blue">0</span><td align=center><span style="color: red">00</span><td align=center><span style="color: blue">0</span><td align=center><span style="color: brown">0</span><td align=center><span style="color: orange">0</span><td align=center><span style="color: red">00</span><span style="color: brown">0</span><span style="color: orange">0</span><td align=center>GBGB
/// <tr><td align=center>1<td align=center><span style="color: red">00</span><span style="color: blue">1</span><td align=center><span style="color: red">00</span><td align=center><span style="color: blue">1</span><td align=center><span style="color: brown">1</span><td align=center><span style="color: orange">1</span><td align=center><span style="color: red">00</span><span style="color: brown">1</span><span style="color: orange">1</span><td align=center>GBRY
/// <tr><td align=center>2<td align=center><span style="color: red">01</span><span style="color: blue">0</span><td align=center><span style="color: red">01</span><td align=center><span style="color: blue">0</span><td align=center><span style="color: brown">0</span><td align=center><span style="color: orange">1</span><td align=center><span style="color: red">01</span><span style="color: brown">0</span><span style="color: orange">1</span><td align=center>GYGY
/// <tr><td align=center>3<td align=center><span style="color: red">01</span><span style="color: blue">1</span><td align=center><span style="color: red">01</span></span><td align=center><span style="color: blue">1</span><td align=center><span style="color: brown">1</span><td align=center><span style="color: orange">0</span><td align=center><span style="color: red">01</span><span style="color: brown">1</span><span style="color: orange">0</span><td align=center>GYRB
/// <tr><td align=center>4<td align=center><span style="color: red">10</span><span style="color: blue">0</span><td align=center><span style="color: red">10</span><td align=center><span style="color: blue">0</span><td align=center><span style="color: brown">1</span><td align=center><span style="color: orange">0</span><td align=center><span style="color: red">10</span><span style="color: brown">1</span><span style="color: orange">0</span><td align=center>RBRB
/// <tr><td align=center>5<td align=center><span style="color: red">10</span><span style="color: blue">1</span><td align=center><span style="color: red">10</span><td align=center><span style="color: blue">1</span><td align=center><span style="color: brown">0</span><td align=center><span style="color: orange">1</span><td align=center><span style="color: red">10</span><span style="color: brown">0</span><span style="color: orange">1</span><td align=center>RBGY
/// <tr><td align=center>6<td align=center><span style="color: red">11</span><span style="color: blue">0</span><td align=center><span style="color: red">11</span><td align=center><span style="color: blue">0</span><td align=center><span style="color: brown">1</span><td align=center><span style="color: orange">1</span><td align=center><span style="color: red">11</span><span style="color: brown">1</span><span style="color: orange">1</span><td align=center>RYRY
/// <tr><td align=center>7<td align=center><span style="color: red">11</span><span style="color: blue">1</span><td align=center><span style="color: red">11</span><td align=center><span style="color: blue">1</span><td align=center><span style="color: brown">0</span><td align=center><span style="color: orange">0</span><td align=center><span style="color: red">11</span><span style="color: brown">0</span><span style="color: orange">0</span><td align=center>RYGB
/// </table>
/// </center>
///
/// ### 3.4 Tiling the Grid
///
/// Function `CWangTiler::Generate()` tiles the grid in row-major order,
/// that is, from left-to-right across each row, from the top row to the bottom.
/// During each iteration a tile must be chosen matching the colors
/// of the existing tiles above and to the left of the current grid position.
/// That is, the top and left colors of the current tile are fixed by
/// the bottom color of the tile above and the
/// right color of the tile to the left.  Notice, by examining the tiles
/// in Fig. 2, there are exactly two tiles for every choice of top and left colors.
/// Exactly which of the two candidate tiles is used can be chosen pseudo-randomly
/// as shown in Fig. 4.
///
/// \image html flip.png "Fig. 4: There are exactly 2 choices for a tile once its top and left colors have been fixed." width=360
///
/// ### 3.5 Choosing the Next Tile
///
/// Suppose the tile above the current grid position has index \f$y = y_2y_1y_0\f$,
/// the tile to the left has index \f$x = x_2x_1x_0\f$, 
/// and we need a matching tile with index \f$z = z_2z_1z_0\f$.
/// Its top color \f$z_2\f$ must equal the top tile's bottom color, which
/// is \f$y_2 \oplus y_0\f$. In code that would be
/// `(y&4)^(y&1)<<2` (note that `<<` has higher precedence than `^`).
/// Its left color \f$z_1\f$ must equal the left tile's right color, which
/// is \f$x_1 \oplus x_0\f$. In code that would be
/// `(x&2)^(x&1)<<1`. The remaining bit \f$z_0\f$ can be chosen pseudo-randomly.
/// This is implemented in `CWangTiler::Match()`. See Section 3.3 above
/// for more details.
///
/// 4. The User Interface
/// ------------------
///
/// The user interface consists of two drop-down menus, `File`,
/// and `Tileset`. 
/// The `File` menu lets you `Generate` a new Wang tiling, `Save` the current image,
/// or `Quit` the application. 
///
/// \image html FileMenu.png width=160
///
/// The `Tileset` menu lets you select from some hard-coded tilesets. A checkmark
/// will appear next to the one that is currently displayed. See Fig. 1 for some examples.
///
/// \image html TilesetMenu.png width=151
///

 